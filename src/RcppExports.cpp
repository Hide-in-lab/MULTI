// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lm_cpp
Rcpp::List lm_cpp(const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _MULTI_lm_cpp(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_cpp(y, X));
    return rcpp_result_gen;
END_RCPP
}
// MULTI_single
List MULTI_single(const List& DataList, double r2, int iter_times, double ELBO_tol);
RcppExport SEXP _MULTI_MULTI_single(SEXP DataListSEXP, SEXP r2SEXP, SEXP iter_timesSEXP, SEXP ELBO_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type DataList(DataListSEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type iter_times(iter_timesSEXP);
    Rcpp::traits::input_parameter< double >::type ELBO_tol(ELBO_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(MULTI_single(DataList, r2, iter_times, ELBO_tol));
    return rcpp_result_gen;
END_RCPP
}
// MULTI
List MULTI(const List& DataList, std::string tissue_ref, double r2, double cut_off, int iter_times, double ELBO_tol);
RcppExport SEXP _MULTI_MULTI(SEXP DataListSEXP, SEXP tissue_refSEXP, SEXP r2SEXP, SEXP cut_offSEXP, SEXP iter_timesSEXP, SEXP ELBO_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type DataList(DataListSEXP);
    Rcpp::traits::input_parameter< std::string >::type tissue_ref(tissue_refSEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type cut_off(cut_offSEXP);
    Rcpp::traits::input_parameter< int >::type iter_times(iter_timesSEXP);
    Rcpp::traits::input_parameter< double >::type ELBO_tol(ELBO_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(MULTI(DataList, tissue_ref, r2, cut_off, iter_times, ELBO_tol));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _MULTI_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MULTI_lm_cpp", (DL_FUNC) &_MULTI_lm_cpp, 2},
    {"_MULTI_MULTI_single", (DL_FUNC) &_MULTI_MULTI_single, 4},
    {"_MULTI_MULTI", (DL_FUNC) &_MULTI_MULTI, 6},
    {"_MULTI_rcpp_hello_world", (DL_FUNC) &_MULTI_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_MULTI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
